//1.单行代码块
function foo () { return true }
if (foo) { bar = 0 }

//2.大括号风格

//One True Brace Style
if (foo) {
  bar()
} else {
  baz()
}

//3.变量命名-采用驼峰式命名

//4.拖尾逗号,拖尾逗号的好处是，简化了对象和数组添加或删除元素，
//在 ECMAScript5 里面，对象字面量中的拖尾逗号是合法的，但在 IE8（非 IE8 文档模式）下，当出现拖尾逗号，则会抛出错误。
//我们只需要修改新增的行即可，并不会增加差异化的代码行数。
const foo = {
	name: 'foo',
	age: '22',
}

//5.逗号空格
//逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。
//分割列表时，逗号放置在当前行的末尾
const foo = 1, bar = 2
const foo = ['name', 
            'age']

        
//6.计算属性的空格
//团队约定在对象的计算属性内，禁止使用空格
obj['foo']

//7.拖尾换行
//在日常的项目中，保留拖尾换行的好处是，可以减少版本控制时的代码冲突。
function func () {
	//do something
}
//new line

//8.函数调用时禁止使用空格
fn()

//9.缩进
//两个空格

//10.对象字面量的键值缩进
//团队约定对象字面量的键和值之间不能存在空格，
//且要求对象字面量的冒号和值之间存在一个空格
const obj = { 'foo': 'hahah' }

//11.构造函数首字母大写
const fooItem = new foo()

//12.构造函数的参数，不省略后面的圆括号
const person = new person()

//13.链式调用
//本规范约定一行最多只能有四个链式调用，超过就要求换行。


//14.空行
//空白行对于分离代码逻辑有帮助，但过多的空行会占据屏幕的空间，影响可读性。
//团队约定最大连续空行数为 2
const a = 1
const b = 2

//15.链式赋值
//禁止使用

//16.变量声明
//团队约定在声明变量时，一个声明只能有一个变量
const a 
const b 
const c

//17.分号
//，本规范推荐不使用分号，因为我们认为好的工程师应该知道什么时候该加，什么时候不该加。


//18.代码块空格
//一致性是任何风格指南的重要组成部分。团队约定代码块前要添加空格

if (a) {
	b()
}

function a () {}


//19.函数声明的空格
//命名函数要求函数名和 function 关键字之间有空格，但是匿名函数要求不加空格
//团队约定函数括号前要加空格
function func (x) {}

//20.操作符的空格
//团队约定操作符前后都需要添加空格
const sum = 1 + 2


//21. BOM
//Unicode 字节顺序标记 (BOM) 用来指定代码单元是高字节序还是低字节序。
//也就是说，是高位在前还是低位在前。
//UTF-8 不需要 BOM 来表明字节顺序，因为单个字节并不影响字节顺序。



